%% Казваме, че списък X мажорира списък Y, ако всички елементи на X са елементи
%% на Y. Да се дефинирана пролог предикат p(L, M), който по даден списък от
%% списъци L намира списък M, който съдържа всички елементи на L, за който e в
%% сила че никой елемент не се мажорира от елемент, намиращ се след него в
%% списъка.

%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Solution
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

append([], R, R).
append([X|L], R, [X|S]) :- append(L, R, S).

member(L,X) :- append(_, [X|_], L).
major(L,R) :- not((member(L,X), not(member(R,X)))).

p([],[]).
p([X|L], [X|R]) :- not((member(L,Y), major(X,Y))), p(L,R).
p([X|L], R) :- member(L,Y), major(X,Y), p(L,R).

%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Tests
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

?- append([1],[2],[1,2]).
?- append([1,2,3],[4],[1,2,3,4]).

?- member([a,b,c,d,e,f],a).
?- not(member([a,b,c,d,e,f],g)).

?- major([1,2], [1,2,3,4,5]).

?- p([[1],[2,3],[2,3,4]], [[1],[2,3,4]]).
?- p([[1],[2,3],[2,3,4]], X), writeln(X).
