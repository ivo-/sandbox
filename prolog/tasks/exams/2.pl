%% Да се дефинира на пролог предикат p( L ), който по даден списък от различни
%% списъци L проверява дали в L съществуват два различни елемента, които имат
%% общ елемент, който не принадлежи на никой друг елемент на L.

%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Solution
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

append([], R, R).
append([X|L],R,[X|S]) :- append(L,R,S).

member(L,X) :- append(_, [X|_], L).
common(L,R,X) :- member(L,X), member(R,X).

pair(A,L,R) :- member(A,L), member(A,R), not(L = R).
without(L,X,S) :- append(LL, [X|LR], L), append(LL, LR, S).
without_pair(L,X,Y,S) :- without(L,X,Q), without(Q,Y,S).

p(A) :- pair(A,L,R),
        without_pair(A,L,R,S),
        common(L,R,X), not((member(S,Q), member(Q,X))).

%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Tests
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

?- append([1],[2],[1,2]).
?- append([1,2,3],[4],[1,2,3,4]).

?- member([a,b,c,d,e,f],a).
?- not(member([a,b,c,d,e,f],g)).

?- common([1,2,3,a], [a,4,5,6,7], a).
?- common([1,2,3,a], [a,4,5,6,7], X), writeln(X).

?- pair([1,2,3,4,5], 4, 5).
?- not(pair([1,2,3,4,5], 4, 7)).

?- without([1,2,3], 1, [2,3]).
?- without([1,2,3], 2, [1,3]).
?- without([1,2,3], 3, [1,2]).

?- without_pair([1,2,3,4], 1, 2, [3,4]).
?- without_pair([1,2,3,4], 1, 4, [2,3]).

?- p([[1,2],[2,3]]).
?- p([[1,2],[2,3],[3,4]]).
?- not(p([[1,2],[2,3],[2,4]])).
?- p([[1,2],[2,3],[2,4],[4,5]]).
