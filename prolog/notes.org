#+TITLE: Logic programing with Prolog
#+STARTUP: showall

* Resources
** Prolog A Tutorial Introduction

   James Lu
   Jerud J. Mead

   Computer Science Department
   Bucknell University
   Lewisburg, PA 17387

* Summary

  Logic programming is a programming paradigm based on mathematical logic. In
  this paradigm the programmer specifies relationships among data values (this
  constitutes a logic program) and then poses queries to the execution
  environment in order to see whether certain relationships hold.

  Putting this in another way, a logic program, through explicit facts and
  rules, defines a base of knowledge from which implicit knowledge can be
  extracted.

  The Prolog execution environment doesn’t so much "compute" an answer, it
  "deduces" an answer from the relation definitions at hand. Rather than being
  given an expression to evaluate, the Prolog environment is given an expression
  which it interprets as a question:

    For what parameter values does the expression evaluate to true?

  Prolog has no types. Though the basic elements of Prolog are typeless, most
  implementations have been enhanced to include character and integer values and
  operations. Also, Prolog has mechanisms built in for describing tuples and
  lists.

  *constants* - identifiers that start with lower-case letters.
  *variables* - identifiers that start with upper-case letters.

* Prolog

  Prolog is referred to as a *declarative language*. A Prolog program consists
  of *facts* and *rules* which serve to define *relations* aka *predicates*.
  Execution engine is a mechanism for recursively extracting sets of data values
  implicit in the facts and rules of a program. It is based on *unification* and
  *resolution*.

** Facts and Rules

   Both of these statements are used for describing *predicates* and can be
   combined in predicate definition.

   *Fact* is statement, consisting of an *identifier*(predicate name) and *tuple
   of constants*, and sets that tuple *satisfies* unconditionally the predicate.

     parent(lisp, clojure). % Note the lower case used for constants.

   *Rule* is statement which gives ~conditions under which a tuple of constants
   satisfy the predicate~. In a sense a ~fact is just a special case of rule~,
   where condition is always satisfied by some chosen tuple of constants.

   *Atom* is a *predicate* followed by a tuple of *terms*, where both
   *constants* and *variables* are terms. Every *fact* is an *atom* and *rule*
   *consists from a group of atoms. If a tuple satisfies the predicate of the
   *atom, we say that atom is true.

     *head* :- *body*           % Building blocks of a rule.
     *Atom* :- *Atom1*, *Atom2* % If Atom[1..n] is true then Atom is also true.

     tedge(Node1,Node2) :-
       edge(Node1,SomeNode),
       edge(SomeNode,Node2).

   *Recursive rules* can be used to express recurrent predicate definitions.

     path(Node1, Node2) :-
       edge(Node1, Node2).
     path(Node1, Node2) :-
       edge(Node1, SomeNode),
       path(SomeNode, Node2).

** Queries

   We can send queries to predicates to extract some implicit information,
   defined by facts and rules. A query represents a question to Prolog program.

     ?- parent(c, lisp). % Check if constants satisfy the predicate. This is a
                         % "ground query" and we expect true/false answer.
                         %
     ?- parent(c, X).    % Request possible values for variables aka
     ?- parent(X, c).    % "non-Ground" queries.
     ?- parent(X, Y).    %

     ?- parent(c, X), parent(X, c).

** Computation

*** Ground queries

    In response to a ground query Prolog systems scans the program looking for
    the rule or fact whit heads which matches the predicate in the query. This
    search is always done top-bottom so the order of definitions matter. A match
    is found if the parameters to the query are identical to those of the head
    of a rule or if the corresponding parameter in the rule head is a variable.

*** non-Ground queries

    In response to non-ground query Prolog returns values for variables that
    will produce satisfiable result when replaced in query in place of the
    variable. Query is satisfiable relative to the program because there exists
    substitution for its variable, which makes the query true. Query is resolved
    by a series of substitutions walking trough the recursion tree and return
    all found satisfiable results. Then we can choose Werther we want this
    process to continue or currently found values are enough.

** Unification and Resolution

   *Unification* is the process of taking two atoms(on from the query and one
   from the fact or head of the rule) and determining if there is a
   substitution which makes them the same.

   *Resolution* happens when an atom of the query has been unified with the head
    of the rule(fact). It replaces the body of the rule(or nothing, if fact) and
    then applies the substitution for the new query.

    tedge(a,X) -> tedge(Node1,Node2) % unification (Node1 = a, X = Node2)
    tedge(a,X) -> edge(a,SomeNode),edge(SomeNode,Node2) % substitution

      edge(a,SomeNode) -> edge(a,b) % unification(SomeNode = b)
      edge(a,SomeNode) -> nothing   % substitution

      edge(b,Node2) -> edge(b,d)    % unification(Node2 = d)
      edge(b,Node2) -> nothing      % substitution

    Resulting query is empty and we are done. At this point the substitution can
    be determined. Notice that at no point has there been anything like a
    traditional computation – just the unification to match up arguments (pass
    parameters?) and the resolution to reform the query.
