#+TITLE: Problem 2.1
#+OPTIONS: tex:t toc:nil num:nil f:nil todo:nil author:nil email:nil
#+OPTIONS: creator:nil d:nil timestamp:nil

#+STYLE: <style>
#+STYLE: h1.title {text-align: left; margin-left: 3%;}
#+STYLE: p { margin: 0; padding 0; white-space: pre; }
#+STYLE: section {  margin-left: 3%; }
#+STYLE: blockquote { padding: 10px; border-left: 5px silver solid; font-weight:bold; }
#+STYLE: </style>

#+BEGIN_QUOTE
Bubblesort is a popular, but inefficient, sorting algorithm. It works by repeatedly
swapping adjacent elements that are out of order.
BUBBLESORT$(A)$

    1 for i = 1 to A.length - 1
    2   for j = A.length downto i + 1
    3     if A[j] < A[j - 1]
    4       exchange A[j] with A[j - 1]


a. Let A` denote the output of BUBBLESORT(A). To prove that BUBBLESORT
is correct, we need to prove that it terminates and that
$A`[1] \leq A`[2] \leq ... \leq A`[n]$,     (2.3)

where n = A.length. In order to show that BUBBLESORT actually sorts, what
else do we need to prove?

The next two parts will prove inequality (2.3).

b. State precisely a loop invariant for the for loop in lines 2–4, and prove that this
loop invariant holds. Your proof should use the structure of the loop invariant
proof presented in this chapter.

c. Using the termination condition of the loop invariant proved in part (b), state
a loop invariant for the for loop in lines 1–4 that will allow you to prove inequality
(2.3). Your proof should use the structure of the loop invariant proof
presented in this chapter.

d. What is the worst-case running time of bubblesort? How does it compare to the
running time of insertion sort?
#+END_QUOTE

#+HTML: <section>
{solution}
#+HTML: </section>
