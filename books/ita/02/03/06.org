#+TITLE: Exercise 2.3.6
#+OPTIONS: tex:t toc:nil num:nil f:nil todo:nil author:nil email:nil
#+OPTIONS: creator:nil d:nil timestamp:nil

#+STYLE: <style>
#+STYLE: h1.title {text-align: left; margin-left: 3%;}
#+STYLE: p { margin: 0; padding 0; white-space: pre; }
#+STYLE: section {  margin-left: 3%; }
#+STYLE: blockquote { padding: 10px; border-left: 5px silver solid; font-weight:bold; }
#+STYLE: </style>

#+BEGIN_QUOTE
Observe that the while loop of lines 5â€“7 of the INSERTION-SORT
procedure in Section 2.1 uses a linear search to scan (backward)
through the sorted subarray $A[1..j-1]$. Can we use a binary search (see
Exercise 2.3-5) instead to improve the overall worst-case running time
of insertion sort to $n\lg{n}$?
#+END_QUOTE

#+HTML: <section>
No. Worst case running time is $n^2$ even if search is with
constant time, because if algorithm must set element in first place,
it should perform n-1 steps to move other elements.
#+HTML: </section>
