// -*- coding: utf-8 -*-
// Insertion sort
// ==================================
//
// Неефективен за големи масиви, но доста ефективен за малки.
//
// В най-лошия случай има сложност => O(n^2), когато масивът е
// сортиран в обратен ред и сложност => O(n) когато масивът е
// сортиреан първоначално в правиления ред.
//
// Представяме си, че разделя масива на 2 части - сортирана и
// несортирана. На всяка итерация вземаме елемент от несортираната и
// го слагаме в сортираната, като се грижим тя да остане такава. Прави
// се докато имаме несортирани елементи.
//
// TODO: алализ на сложността
//
//
//


#include <iostream>
using namespace std;

const int LEN  = 12;
int input[LEN] = {10, 1, 5, 6, 2, 3, 7, 7, 10, 0, 14, 99};

void insertion_sort()
{
    int i, j;
    for(i=1; i<LEN; i++)
    {
        for(j=i; j>0 && input[j-1] > input[j]; j--)
        {
            swap(input[j-1], input[j]);
        }
    }
}

int main()
{
    insertion_sort();

    for(int i=0; i<LEN; i++)
        cout << input[i] << " ";

    cout << endl;

    return 0;
}
